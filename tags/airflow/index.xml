<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Airflow on Kounoike&#39;s GitHub Pages</title>
    <link>https://kounoike.github.io/tags/airflow/</link>
    <description>Recent content in Airflow on Kounoike&#39;s GitHub Pages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</managingEditor>
    <webMaster>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</webMaster>
    <lastBuildDate>Tue, 27 Oct 2015 21:57:42 +0900</lastBuildDate>
    <atom:link href="https://kounoike.github.io/tags/airflow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Airflowのインストールメモ</title>
      <link>https://kounoike.github.io/posts/2015-10-27-install-airflow/</link>
      <pubDate>Tue, 27 Oct 2015 21:57:42 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-27-install-airflow/</guid>
      <description>

&lt;p&gt;なんか&lt;a href=&#34;https://twitter.com/wyukawa/status/658960252365336576&#34;&gt;リクエスト&lt;/a&gt;があったようなので、インストールメモを残しておこう。
ついでに環境も残しておいていつでも起動できるようにしておこう。&lt;/p&gt;

&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;

&lt;p&gt;基本的には&lt;code&gt;pip install airflow&lt;/code&gt;なんだけど、numpyのビルドをうだうだやった後になって「これ、&amp;ndash;allow-externalがいるんだけど」なんて
言ってくるので面倒（どういうときにallow-externalがいるのか知らないけど）。最終的な手順としては以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ virtualenv env
$ . env/bin/activate
$ pip install --allow-external pygments pygments
$ pip install --allow-external python-dateutil python-dateutil
$ pip install --allow-external requests requests
$ pip install --allow-external setproctitle setproctitle
$ pip install airflow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;virtualenvをactivateしたら最初にnumpyを入れるのもアリかもしれない。&lt;/p&gt;

&lt;h1 id=&#34;初回起動-db作成&#34;&gt;初回起動（DB作成）&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ export AIRFLOW_HOME=~/python/airflow
$ airflow initdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;起動-web-ui-ワーカー&#34;&gt;起動（Web UI、ワーカー）&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ airflow webserver -p 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8080ポートにアクセスすると以下の画面が見える。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kounoike.github.io/img/2015-10-27-airflow.png&#34; alt=&#34;2015-10-27-airflow.png&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;登録されているジョブの実行&#34;&gt;登録されているジョブの実行&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/python/airflow
$ . env/bin/activate
$ export AIRFLOW_HOME=~/python/airflow
$ airflow run example_bash_operator runme_0 2015-01-01
Sending to executor.
Logging into: /home/kounoike/python/airflow/logs/example_bash_operator/runme_0/2015-01-01T00:00:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example_bash_operatorというDAGのrunme_0というジョブが実行される。&lt;/p&gt;

&lt;h1 id=&#34;課題&#34;&gt;課題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;前提ジョブを含めて一通りのフローを実行するコマンドが分からないから、1個1個ジョブをrunする必要がある&lt;/li&gt;
&lt;li&gt;Web UIからジョブの実行をさせるにはCeleryを入れないといけないみたい&lt;/li&gt;
&lt;li&gt;認証のかけ方は？&lt;/li&gt;
&lt;li&gt;ジョブ・DAGの登録の仕方を調べていない&lt;/li&gt;
&lt;li&gt;スケジュール実行よりで（上も過去の時間を設定することで即時実行させている）イマイチ？&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>スケジューラ色々</title>
      <link>https://kounoike.github.io/posts/2015-10-24-schedulers/</link>
      <pubDate>Sat, 24 Oct 2015 14:43:17 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-24-schedulers/</guid>
      <description>

&lt;p&gt;Chinachuのエンコードジョブのバッチ管理に&lt;a href=&#34;https://azkaban.github.io/&#34;&gt;Azkaban&lt;/a&gt;を使っていたのだが、若干不満もあるので他に良いツールがないか調べてみた。
結果、今のところAzkabanが最適だという結論になってしまった。&lt;/p&gt;

&lt;h1 id=&#34;azkabanの不満&#34;&gt;Azkabanの不満&lt;/h1&gt;

&lt;p&gt;Project（ジョブのまとまり）の名前が英数字といくつかの記号でしか使えない。使い方がChinachuのエンコード管理なので、
Project名に「タイトル-日付」とかにしたい。&lt;/p&gt;

&lt;p&gt;エンコードをずっとやっているとProjectがたまりまくって割りとうっとうしい。検索とかしやすくなると良いのだけど&lt;/p&gt;

&lt;h1 id=&#34;要件&#34;&gt;要件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;フロー・ジョブの登録がシェルスクリプトなどからできる（recordedCommandで実行するので）&lt;/li&gt;
&lt;li&gt;ジョブの依存関係でDAGフローが作成できる&lt;/li&gt;
&lt;li&gt;フローの即時実行ができる&lt;/li&gt;
&lt;li&gt;フローの並列度を制御する&lt;/li&gt;
&lt;li&gt;できれば、登録したジョブ・フローの検索性が良いこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;調査結果&#34;&gt;調査結果&lt;/h1&gt;

&lt;h2 id=&#34;airflow-https-github-com-airbnb-airflow&#34;&gt;&lt;a href=&#34;https://github.com/airbnb/airflow&#34;&gt;airflow&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;なんかAzkaban派だった人たちが移行しているらしいとのうわさをTwitterで見つけてチェックしてみた。
うーん、いまいち&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flowの実行制御ができていない？（ジョブ１個ずつ走らせないと動かないような）&lt;/li&gt;
&lt;li&gt;スケジュール実行（時間指定）がメインっぽいインターフェース&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;luigi-https-github-com-spotify-luigi&#34;&gt;&lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;luigi&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;シンプルなんだけど、機能不足&lt;/p&gt;

&lt;h2 id=&#34;rundeck-http-rundeck-org&#34;&gt;&lt;a href=&#34;http://rundeck.org/&#34;&gt;Rundeck&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;割と良くできているように見えるけど、イマイチニーズに合わない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;やっぱりスケジュール実行メインのインターフェース&lt;/li&gt;
&lt;li&gt;DAGのフローではなくステップ実行がメイン？&lt;/li&gt;
&lt;li&gt;タスク同時実行の並列度制御ができないらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;Azkabanでいいじゃん&lt;/p&gt;

&lt;h1 id=&#34;おまけ&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;調べてる過程で見つけた、&lt;a href=&#34;https://pypi.python.org/pypi/azkaban&#34;&gt;pythonのazkabanバインディング&lt;/a&gt;がまあまあ良い感じだった。
ごりごりと作るのはシェルスクリプトでやるのと似たようなものだけど、jobの一時ファイルを作らなくても良いとか、
pyファイル1個で全部実現できるとかメリットが色々ある。&lt;/p&gt;

&lt;p&gt;ただ、日本語をコマンド内に記述すると上手くいかないため、Projectのpropertiesに入れる必要があった。
しかも、ただ入れただけじゃダメで、Javaの悪しき習慣である、native2ascii相当の処理をかけてやらないといけなかった。&lt;/p&gt;

&lt;p&gt;で、native2ascii相当のことをするのに適当にpypi探して見つけたのが&lt;a href=&#34;https://github.com/zerok/pyjavaproperties-unicode&#34;&gt;zerok/pyjavaproperties-unicode&lt;/a&gt;。
ただし、こいつもバグがあって、変換しなければいけないUnicode文字が複数続いていると落ちるとか・・・
さくっと&lt;a href=&#34;https://github.com/zerok/pyjavaproperties-unicode/pull/2&#34;&gt;PR&lt;/a&gt;書いたので、そのうち反映されるかな・・・&lt;/p&gt;

&lt;p&gt;まあ、このソースを参考にencode_unicode()を書けば良いだけなんだけど。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>