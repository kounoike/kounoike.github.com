<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azkaban on Kounoike&#39;s GitHub Pages</title>
    <link>https://kounoike.github.io/tags/azkaban/</link>
    <description>Recent content in Azkaban on Kounoike&#39;s GitHub Pages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</managingEditor>
    <webMaster>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</webMaster>
    <lastBuildDate>Sat, 24 Oct 2015 14:43:17 +0900</lastBuildDate>
    <atom:link href="https://kounoike.github.io/tags/azkaban/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>スケジューラ色々</title>
      <link>https://kounoike.github.io/posts/2015-10-24-schedulers/</link>
      <pubDate>Sat, 24 Oct 2015 14:43:17 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-24-schedulers/</guid>
      <description>

&lt;p&gt;Chinachuのエンコードジョブのバッチ管理に&lt;a href=&#34;https://azkaban.github.io/&#34;&gt;Azkaban&lt;/a&gt;を使っていたのだが、若干不満もあるので他に良いツールがないか調べてみた。
結果、今のところAzkabanが最適だという結論になってしまった。&lt;/p&gt;

&lt;h1 id=&#34;azkabanの不満&#34;&gt;Azkabanの不満&lt;/h1&gt;

&lt;p&gt;Project（ジョブのまとまり）の名前が英数字といくつかの記号でしか使えない。使い方がChinachuのエンコード管理なので、
Project名に「タイトル-日付」とかにしたい。&lt;/p&gt;

&lt;p&gt;エンコードをずっとやっているとProjectがたまりまくって割りとうっとうしい。検索とかしやすくなると良いのだけど&lt;/p&gt;

&lt;h1 id=&#34;要件&#34;&gt;要件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;フロー・ジョブの登録がシェルスクリプトなどからできる（recordedCommandで実行するので）&lt;/li&gt;
&lt;li&gt;ジョブの依存関係でDAGフローが作成できる&lt;/li&gt;
&lt;li&gt;フローの即時実行ができる&lt;/li&gt;
&lt;li&gt;フローの並列度を制御する&lt;/li&gt;
&lt;li&gt;できれば、登録したジョブ・フローの検索性が良いこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;調査結果&#34;&gt;調査結果&lt;/h1&gt;

&lt;h2 id=&#34;airflow-https-github-com-airbnb-airflow&#34;&gt;&lt;a href=&#34;https://github.com/airbnb/airflow&#34;&gt;airflow&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;なんかAzkaban派だった人たちが移行しているらしいとのうわさをTwitterで見つけてチェックしてみた。
うーん、いまいち&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flowの実行制御ができていない？（ジョブ１個ずつ走らせないと動かないような）&lt;/li&gt;
&lt;li&gt;スケジュール実行（時間指定）がメインっぽいインターフェース&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;luigi-https-github-com-spotify-luigi&#34;&gt;&lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;luigi&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;シンプルなんだけど、機能不足&lt;/p&gt;

&lt;h2 id=&#34;rundeck-http-rundeck-org&#34;&gt;&lt;a href=&#34;http://rundeck.org/&#34;&gt;Rundeck&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;割と良くできているように見えるけど、イマイチニーズに合わない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;やっぱりスケジュール実行メインのインターフェース&lt;/li&gt;
&lt;li&gt;DAGのフローではなくステップ実行がメイン？&lt;/li&gt;
&lt;li&gt;タスク同時実行の並列度制御ができないらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;Azkabanでいいじゃん&lt;/p&gt;

&lt;h1 id=&#34;おまけ&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;調べてる過程で見つけた、&lt;a href=&#34;https://pypi.python.org/pypi/azkaban&#34;&gt;pythonのazkabanバインディング&lt;/a&gt;がまあまあ良い感じだった。
ごりごりと作るのはシェルスクリプトでやるのと似たようなものだけど、jobの一時ファイルを作らなくても良いとか、
pyファイル1個で全部実現できるとかメリットが色々ある。&lt;/p&gt;

&lt;p&gt;ただ、日本語をコマンド内に記述すると上手くいかないため、Projectのpropertiesに入れる必要があった。
しかも、ただ入れただけじゃダメで、Javaの悪しき習慣である、native2ascii相当の処理をかけてやらないといけなかった。&lt;/p&gt;

&lt;p&gt;で、native2ascii相当のことをするのに適当にpypi探して見つけたのが&lt;a href=&#34;https://github.com/zerok/pyjavaproperties-unicode&#34;&gt;zerok/pyjavaproperties-unicode&lt;/a&gt;。
ただし、こいつもバグがあって、変換しなければいけないUnicode文字が複数続いていると落ちるとか・・・
さくっと&lt;a href=&#34;https://github.com/zerok/pyjavaproperties-unicode/pull/2&#34;&gt;PR&lt;/a&gt;書いたので、そのうち反映されるかな・・・&lt;/p&gt;

&lt;p&gt;まあ、このソースを参考にencode_unicode()を書けば良いだけなんだけど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azkabanでエラーメール</title>
      <link>https://kounoike.github.io/posts/2015-10-04-azkaban-mail/</link>
      <pubDate>Sun, 04 Oct 2015 22:06:26 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-04-azkaban-mail/</guid>
      <description>&lt;p&gt;Azkabanでエラーがあったときにメールするようにしよう、と思ったらGmailの587ポート接続に対応していない。パッチを当てて再ビルドしよう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/azkaban/azkaban/pull/395.patch&#34;&gt;PR #395のパッチ&lt;/a&gt;を当ててもう一度ビルド、出来上がったjarをazakabanのlib/に置いて再起動すれば
mail.portの設定が使えるようになるので、Gmailでも使えるようになる。&lt;/p&gt;

&lt;p&gt;しかし、これが本体に取り込まれる気配がないという。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chinachuの録画後エンコード・CMカットにAzkabanを入れてジョブ実行管理してみる(ジョブ作成編)</title>
      <link>https://kounoike.github.io/posts/2015-10-04-azkaban-for-chinachu-job/</link>
      <pubDate>Sun, 04 Oct 2015 00:36:13 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-04-azkaban-for-chinachu-job/</guid>
      <description>

&lt;p&gt;Azkabanが入ったとして、ジョブを作成して投入・実行指令を出すシェルスクリプトを作ってみます。
まずはrecordedCommandに登録する前にテスト実行できるレベルで、CM検出無しのエンコードのみで。
エンコードオプションは、&lt;a href=&#34;http://d.hatena.ne.jp/munepi/20091227/1261941397&#34;&gt;ffmpeg で TS をできるだけ高画質な mp4 へ変換してみた&lt;/a&gt;を参考に設定。&lt;/p&gt;

&lt;h1 id=&#34;準備&#34;&gt;準備&lt;/h1&gt;

&lt;p&gt;ジョブフローのアップロードにzipファイルの作成が必要なので、インストールしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ffmpegのプリセットを、/home/chinachu/chinachu/usr/share/ffmpeg/にlibx264-hq-ts.ffpresetの名前で置いておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=41
crf=25
coder=1
flags=+loop
cmp=+chroma
partitions=+parti8x8+parti4x4+partp8x8+partb8x8
me_method=umh
subq=7
me_range=16
g=250
keyint_min=25
sc_threshold=40
i_qfactor=0.71
b_strategy=1
qmin=10
rc_eq=&#39;blurCplx^(1-qComp)&#39;
bf=16
bidir_refine=1
refs=6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;deblockalpha, deblockbetaは設定しているとエラーになったので外した。&lt;/p&gt;

&lt;h1 id=&#34;作成するジョブのイメージ&#34;&gt;作成するジョブのイメージ&lt;/h1&gt;

&lt;h2 id=&#34;shared-properties-gr-properties&#34;&gt;shared.properties, gr.properties&lt;/h2&gt;

&lt;p&gt;shared.propertiesには共有する変数などを代入しておく。以下は地上波用の設定値が入っている&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg=/home/chinachu/chinachu/usr/bin/ffmpeg
threads=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gr.propertiesとして、地上波用エンコード設定値を入れておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;preset=libx264-hq-ts
size=640x480
rate=30000/1001
aspect=16:9
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;encode-job&#34;&gt;encode.job&lt;/h2&gt;

&lt;p&gt;エンコードを行うジョブ。テンポラリディレクトリでエンコードを行い、完了後にmvする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type=command
command=${ffmpeg} -y -i &amp;quot;${m2ts}&amp;quot; -v 0 -f mp4 -vcodec libx264 -vpre ${preset} -r ${rate} -aspect ${aspect} -s ${size} -bufsize 20000k -maxrate 25000k -acodec libfdk_aac -ac 2 -ar 48000 -ab 128k -threads ${threads} &amp;quot;${encodingmp4}&amp;quot;
command.1=mv -f ${encodingmp4} ${encodedmp4}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;files-properties&#34;&gt;files.properties&lt;/h2&gt;

&lt;p&gt;ファイル名を入れておく。シェルスクリプトでこのファイルだけを番組ごとに変える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m2ts=/path/to/recoreded.m2ts
encodingmp4=/tmp/path/to/encoding.mp4
encodedmp4=/another/path/to/encoded.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-job-sh&#34;&gt;create_job.sh&lt;/h2&gt;

&lt;p&gt;ジョブのzipファイルを作成し、アップロード・実行開始を指示するシェルスクリプト。
recordedCommandから呼び出す前提で作っておくので、引数としてm2tsのファイル名・番組ID・チャンネルIDを渡すことにする。&lt;/p&gt;

&lt;p&gt;TODO: チャンネルIDから放送波を見てエンコード設定を切り替える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

JQ=/home/chinachu/chinachu-scripts/jq-linux64

tmpldir=$(dirname $0)/job_tmpl
jobsdir=$(dirname $0)/jobs

m2ts=$1
mp4=$(basename &amp;quot;${1%.*}&amp;quot;).mp4

program_id=$2
ch_id=$3

encodingmp4=/video/encoding/$mp4
encodedmp4=/video/mp4/$mp4

tmpdir=/tmp/$program_id

mkdir $tmpdir
cd $tmpldir
cp gr.properties shared.properties encode.job $tmpdir/
cd $tmpdir

cat &amp;lt;&amp;lt; EOS | native2ascii &amp;gt; files.properties
# files.properties
m2ts=${m2ts}
encodingmp4=${encodingmp4}
encodedmp4=${encodedmp4}
EOS

zip ${program_id}.zip *.properties *.job

# login
curl -o login.json -k -X POST --data &amp;quot;action=login&amp;amp;username=azkaban&amp;amp;password=azkaban&amp;quot; http://localhost:8081

session_id=$($JQ -r &#39;.[&amp;quot;session.id&amp;quot;]&#39; login.json)
if [ -z &amp;quot;$session_id&amp;quot; ] ; then
  echo $($JQ -r &#39;.[&amp;quot;error&amp;quot;]&#39; login.json)
  exit 1
fi

# Create project
curl -k -o project.json -X POST --data &amp;quot;session.id=${session_id}&amp;amp;name=${program_id}&amp;amp;description=encode+${mp4}&amp;quot; http://localhost:8081/manager?action=create

# Upload Project Zip
curl -k -o upload.json -i -H &amp;quot;Content-Type: multipart/mixed&amp;quot; -X POST --form &amp;quot;session.id=${session_id}&amp;quot; --form &#39;ajax=upload&#39; --form &amp;quot;file=@${program_id}.zip;type=application/zip&amp;quot; --form &amp;quot;project=${program_id}&amp;quot; http://localhost:8081/manager

# Fetch Flows of a Project
curl -k -o flow.json --get --data &amp;quot;session.id=${session_id}&amp;amp;project=${program_id}&amp;amp;ajax=fetchprojectflows&amp;quot; http://localhost:8081/manager

# Execute Flows
for flowId in $($JQ -r &#39;.[&amp;quot;flows&amp;quot;][0][&amp;quot;flowId&amp;quot;]&#39; flow.json); do
  echo &amp;quot;Execute ${flowId}&amp;quot;
  curl -k -o ${flowId}.json --get --data &amp;quot;session.id=${session_id}&amp;amp;ajax=executeFlow&amp;amp;project=${program_id}&amp;amp;flow=${flowId}&amp;quot; http://localhost:8081/executor
  $JQ -r &#39;.execid&#39; ${flowId}.json &amp;gt; ${jobsdir}/${flowId}
done

cd /
rm -rf $tmpdir

# お片づけ
for f in ${jobsdir}/*; do
  execid=$(cat $f)
  status=$(curl -k --data &amp;quot;session.id=${session_id}&amp;amp;ajax=fetchexecflow&amp;amp;execid=${execid}&amp;quot; http://localhost:8081/executor | $JQ -r &#39;.status&#39;)
  if [ &amp;quot;$status&amp;quot; -eq &amp;quot;SUCCEEDED&amp;quot; ]; then
    proj=$(curl -k --data &amp;quot;session.id=${session_id}&amp;amp;ajax=fetchexecflow&amp;amp;execid=${execid}&amp;quot; http://localhost:8081/executor | $JQ -r &#39;.project&#39;)
    curl -k --data &amp;quot;session.id=${session_id}&amp;amp;delete=true&amp;amp;project=${proj}&amp;quot; http://localhost:8081/manager
    rm -f $f
  fi
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chinachuの録画後エンコード・CMカットにAzkabanを入れてジョブ実行管理してみる(Azkabanインストール編)</title>
      <link>https://kounoike.github.io/posts/2015-10-03-azkaban-for-chinachu/</link>
      <pubDate>Sat, 03 Oct 2015 20:14:58 +0900</pubDate>
      <author>kounoike.yuusuke@gmail.com (KOUNOIKE Yuusuke)</author>
      <guid>https://kounoike.github.io/posts/2015-10-03-azkaban-for-chinachu/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://azkaban.github.io/&#34;&gt;Azkaban&lt;/a&gt;というジョブ管理ツールがあります。
今回はこれを使ってChinachuの録画後にエンコード・CM検出といったジョブを投げて、ジョブ実行管理させてみます。
recordedCommandで直接エンコードした場合には同時実行されてしまうという問題があるので、
Azkabanに並列実行数の制御をやらせてみることが狙いです。なんせ、J2900は30分の番組のエンコードに3時間もかかってしまうような
非力なCPUですので、同時実行の制御は非常に重要です。&lt;/p&gt;

&lt;h1 id=&#34;azkaban-のインストール&#34;&gt;Azkaban のインストール&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://azkaban.github.io/downloads.html&#34;&gt;Azkaban ダウンロードページ&lt;/a&gt; には 2.5.0 までしか無いですが、
&lt;a href=&#34;https://github.com/azkaban/azkaban&#34;&gt;GitHub&lt;/a&gt; の Releases には 2.7.0 までがあります。
したがって、自前でビルドすることにします。しかし、2.7.0はうまく動かないので、2.6.4をビルドします。&lt;/p&gt;

&lt;p&gt;環境はいつもの Ubuntu Server LTS 14.04.3 です。&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;Java がいるのでOracle JDKを入れます。Ubuntu への入れ方は適当にぐぐって調べてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2.6.4のtar.gzをダウンロード&lt;/li&gt;
&lt;li&gt;展開＆cd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;までやったとします。&lt;/p&gt;

&lt;h2 id=&#34;azkaban-solo-server-のビルド&#34;&gt;Azkaban Solo Server のビルド&lt;/h2&gt;

&lt;p&gt;今回は MySQLとかたっていないので、Javaの内蔵DBである H2 DBを使ってみます。
更にWebUI のサーバと実行用サーバの2つが一緒になっている Solo Server というものでやってみます。&lt;/p&gt;

&lt;p&gt;ビルドシステムも Ant から Gradle に変わっています。良く分からないのですが、以下の手順でいけるようです。&lt;/p&gt;

&lt;h3 id=&#34;ビルド&#34;&gt;ビルド&lt;/h3&gt;

&lt;p&gt;soloserver の配布用 tar をビルドします。
なんかpythonジョブのテストに失敗するので、テストをスキップします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gradlew soloserverDistTar -x test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんか注意が出てますけどとりあえずビルドは出来ました。build/distributionsにazkaban-solo-server-2.6.4.tar.gzが出来ています。&lt;/p&gt;

&lt;h2 id=&#34;展開-テスト実行&#34;&gt;展開＆テスト実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ tar zxvf build/distributions/azkaban-solo-server-2.6.4.tar.gz &amp;amp;&amp;amp; sudo cp -R azkaban-solo-server-2.6.4 /opt/azkaban-solo-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;念のため設定系は一般ユーザから読めないようにしておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod og-r /opt/azkaban-solo-server/conf/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /opt/azkaban-solo-server
$ sudo ./bin/azkaban-solo-start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バックグラウンドで色々微妙なログが流れますが、何か起動したっぽいです。&lt;/p&gt;

&lt;h2 id=&#34;ufw-ファイアウォール-の設定&#34;&gt;ufw（ファイアウォール）の設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ufw allow 8081/tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ufwでファイアウォールを管理している場合は8081/tcpを空けます。&lt;/p&gt;

&lt;p&gt;ポート8081にブラウザで接続して、何か見えるようでしたら、動作確認できたということで、もうちょっと設定をしていきます。
azkaban-solo-shutdown.shで停止します。&lt;/p&gt;

&lt;h1 id=&#34;設定&#34;&gt;設定&lt;/h1&gt;

&lt;h2 id=&#34;conf-azkaban-users-xml&#34;&gt;conf/azkaban-users.xml&lt;/h2&gt;

&lt;p&gt;てきとーにユーザ・パスワードを設定します。エンコード用にユーザchinachuを追加。&lt;/p&gt;

&lt;h2 id=&#34;conf-azkaban-properties&#34;&gt;conf/azkaban.properties&lt;/h2&gt;

&lt;p&gt;サーバの名前とタイムゾーンくらいは設定しておきましょう。重要なこととして、並列実行されるジョブを1つだけに制限しておきます。
（executor.flow.threadsとflow.num.job.threadsのどっちが利くかわかってない。後者だけだと同時実行されちゃったので多分前者かな）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Azkaban Personalization Settings
azkaban.name=pt3rec
azkaban.label=My PT3REC Azkaban
azkaban.color=#FF3601
default.timezone.id=Asia/Tokyo

executor.flow.threads=1

flow.num.job.threads=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ユーザ&#34;&gt;ユーザ&lt;/h2&gt;

&lt;p&gt;なんか一般ユーザで実行させるっぽいので適当に作る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo useradd -s /bin/false -d /opt/azkaban-solo-server azkaban
$ sudo chown -R azkaban:azkaban /opt/azkaban-solo-server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;etc-init-azkaban-solo-conf&#34;&gt;/etc/init/azkaban-solo.conf&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-/etc/init/azkaban-solo.conf&#34;&gt;description &amp;quot;Azkaban Solo Server&amp;quot;
author &amp;quot;KOUNOIKE Yuusuke &amp;lt;kounoike.yuusuke@gmail.com&amp;gt;&amp;quot;

start on runlevel [2345]
stop on runlevel [016]

setuid azkaban
setgid azkaban

chdir /opt/azkaban-solo-server

script
echo $$ &amp;gt; /var/run/azkaban-solo/azkaban-solo.pid

azkaban_dir=/opt/azkaban-solo-server
tmpdir=/tmp

for file in $azkaban_dir/lib/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $azkaban_dir/extlib/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $azkaban_dir/plugins/*/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

if [ &amp;quot;$HADOOP_HOME&amp;quot; != &amp;quot;&amp;quot; ]; then
        echo &amp;quot;Using Hadoop from $HADOOP_HOME&amp;quot;
        CLASSPATH=$CLASSPATH:$HADOOP_HOME/conf:$HADOOP_HOME/*
        JAVA_LIB_PATH=&amp;quot;-Djava.library.path=$HADOOP_HOME/lib/native/Linux-amd64-64&amp;quot;
fi

if [ &amp;quot;$HIVE_HOME&amp;quot; != &amp;quot;&amp;quot; ]; then
        echo &amp;quot;Using Hive from $HIVE_HOME&amp;quot;
        CLASSPATH=$CLASSPATH:$HIVE_HOME/conf:$HIVE_HOME/lib/*
fi

echo $azkaban_dir;
echo $CLASSPATH;

executorport=`cat $azkaban_dir/conf/azkaban.properties | grep executor.port | cut -d = -f 2`
serverpath=/opt/azkaban-solo-server

if [ -z $AZKABAN_OPTS ]; then
  AZKABAN_OPTS=-Xmx3G
fi
AZKABAN_OPTS=&amp;quot;$AZKABAN_OPTS -server -Dcom.sun.management.jmxremote -Djava.io.tmpdir=$tmpdir -Dexecutorport=$executorport -Dserverpath=$serverpath&amp;quot;

java $AZKABAN_OPTS -cp $CLASSPATH azkaban.soloserver.AzkabanSingleServer -conf $azkaban_dir/conf &amp;gt;&amp;gt; /var/log/azkaban-solo/azkaban-solo.log 2&amp;gt;&amp;amp;1
end script
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /var/run/azkaban-solo /var/log/azkaban-solo
$ sudo chown azkaban:azkaban /var/run/azkaban-solo /var/log/azkaban-solo
$ sudo initctl reload-configuration
$ sudo start azkaban-solo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upstartよくわかんない。&lt;/p&gt;

&lt;p&gt;ジョブ作成編に続く。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>