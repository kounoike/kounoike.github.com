<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>こーのいけのGitHub Pages</title><link>https://kounoike.github.io/</link><description>こーのいけのGitHub Pages powered by Nikola.</description><atom:link type="application/rss+xml" rel="self" href="https://kounoike.github.io/rss.xml"></atom:link><language>ja</language><lastBuildDate>Thu, 28 Jul 2016 22:12:12 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GitBucket と Jenkins を Pipeline で強力に連携させる</title><link>https://kounoike.github.io/posts/2016-07-23-gitbucket-jenkins/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;Jenkins の 2.7.1 が LTS にやってきたことを機に Jenkins 2 について色々と調べてみた。
目玉はやはり Pipeline Plugin の導入であり、Pipeline ジョブの場合、GitHub との連携は
GitHub Organization Folder Plugin で行うのがとても便利らしい。
ところがこの GitHub Organization Folder Plugin はそのままでは GitBucket とは
連携できないらしい。そこで、どうして動かないのかを調べて、解決するべく PR 送るので、
補足を兼ねてメモしておく。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2016-07-23-gitbucket-jenkins/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><guid>https://kounoike.github.io/posts/2016-07-23-gitbucket-jenkins/</guid><pubDate>Fri, 22 Jul 2016 15:00:00 GMT</pubDate></item><item><title>GitbookでPDF出力を試してみる</title><link>https://kounoike.github.io/posts/2016-06-16-gitbook-pdf/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;ちょっと最近 Markdown/asciidoc などからの PDF 作成を調べて回っている。
asciidoctor も調べたんだけど出力の微調整でうまくいかなくて行き詰っている。
というわけで、Ver.3.0.0以降でPDF出力のテーマ設定が可能になったみたいな、
&lt;a href="https://github.com/GitbookIO/gitbook"&gt;GitbookIO/gitboo&lt;/a&gt; を試してみる。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2016-06-16-gitbook-pdf/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>gitbook pdf</category><guid>https://kounoike.github.io/posts/2016-06-16-gitbook-pdf/</guid><pubDate>Thu, 16 Jun 2016 14:18:17 GMT</pubDate></item><item><title>ジェネレータをNikolaに変えた</title><link>https://kounoike.github.io/posts/2016-04-23-nikola/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;p&gt;なんとなく思うところあってサイトジェネレータを Hugo から Nikola に変えてみた。
Python で書かれていて、ソースにもテンプレートにも馴染みやすいのと、ipynb にも対応しているところがポイントかな。&lt;/p&gt;</description><category>nikola</category><guid>https://kounoike.github.io/posts/2016-04-23-nikola/</guid><pubDate>Fri, 22 Apr 2016 19:52:13 GMT</pubDate></item><item><title>エンコードしない人にもオススメのChinachuを便利にするたった一行のrecordedCommand</title><link>https://kounoike.github.io/posts/2016-03-03-chinachu-symlink/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;自宅の家電レコと比べたときの Chinachu の弱点は未視聴管理ができないことだと思っていました。
でも、ちょっと考えたら簡単な方法で未視聴管理（もどき）が出来ました。それが以下の recordedCommand に登録するシェルスクリプト（実際には他にも色々やってますけど）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2016-03-03-chinachu-symlink/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>chinachu</category><guid>https://kounoike.github.io/posts/2016-03-03-chinachu-symlink/</guid><pubDate>Wed, 02 Mar 2016 15:54:41 GMT</pubDate></item><item><title>Airflowのインストールメモ</title><link>https://kounoike.github.io/posts/2015-10-27-install-airflow/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;なんか&lt;a href="https://twitter.com/wyukawa/status/658960252365336576"&gt;リクエスト&lt;/a&gt;があったようなので、インストールメモを残しておこう。
ついでに環境も残しておいていつでも起動できるようにしておこう。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-27-install-airflow/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><guid>https://kounoike.github.io/posts/2015-10-27-install-airflow/</guid><pubDate>Tue, 27 Oct 2015 12:57:42 GMT</pubDate></item><item><title>Chinachuのサービス化を簡単に書く（Ubuntu/upstart限定）</title><link>https://kounoike.github.io/posts/2015-10-25-chinachu-upstart/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;upstart を使うとサービスの記述が簡単です。chinachu-wui と chinachu-operator の記述をしてみました。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-25-chinachu-upstart/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>chinachu</category><category>ubuntu</category><guid>https://kounoike.github.io/posts/2015-10-25-chinachu-upstart/</guid><pubDate>Sun, 25 Oct 2015 05:21:02 GMT</pubDate></item><item><title>スケジューラ色々</title><link>https://kounoike.github.io/posts/2015-10-24-schedulers/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;Chinachuのエンコードジョブのバッチ管理に&lt;a href="https://azkaban.github.io/"&gt;Azkaban&lt;/a&gt;を使っていたのだが、若干不満もあるので他に良いツールがないか調べてみた。
結果、今のところAzkabanが最適だという結論になってしまった。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-24-schedulers/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>airflow</category><category>azkaban</category><category>luigi</category><category>rundeck</category><category>ubuntu</category><guid>https://kounoike.github.io/posts/2015-10-24-schedulers/</guid><pubDate>Sat, 24 Oct 2015 05:43:17 GMT</pubDate></item><item><title>半自動CMカットスクリプトの作成</title><link>https://kounoike.github.io/posts/2015-10-19-semiauto-cm-cut/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;comskip、色々設定を変えながら試したのですがどうやっても安心して任せられる設定にすることは無理だという結論になりました。
かといっていちいち1ファイルずつちまちまとCMカット作業をしたくはありません。comskipである程度は検出できているのですから。
そうなると次は「人間が確認しつつ、楽をする」ようにしたくなります。そこでcomskipの仕組みを考慮しながら、
pythonやらJavascriptやら使ってCMカット環境を構築してみました。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-19-semiauto-cm-cut/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は7分)&lt;/p&gt;&lt;/div&gt;</description><category>chinachu</category><category>comskip</category><category>ffmpeg</category><category>python</category><category>ubuntu</category><guid>https://kounoike.github.io/posts/2015-10-19-semiauto-cm-cut/</guid><pubDate>Mon, 19 Oct 2015 10:52:20 GMT</pubDate></item><item><title>Azkabanでエラーメール</title><link>https://kounoike.github.io/posts/2015-10-04-azkaban-mail/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;Azkabanでエラーがあったときにメールするようにしよう、と思ったらGmailの587ポート接続に対応していない。パッチを当てて再ビルドしよう。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-04-azkaban-mail/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>azkaban</category><category>ubuntu</category><guid>https://kounoike.github.io/posts/2015-10-04-azkaban-mail/</guid><pubDate>Sun, 04 Oct 2015 13:06:26 GMT</pubDate></item><item><title>Chinachuの録画後エンコード・CMカットにAzkabanを入れてジョブ実行管理してみる(ジョブ作成編)</title><link>https://kounoike.github.io/posts/2015-10-04-azkaban-for-chinachu-job/</link><dc:creator>KOUNOIKE Yuusuke</dc:creator><description>&lt;div&gt;&lt;p&gt;Azkabanが入ったとして、ジョブを作成して投入・実行指令を出すシェルスクリプトを作ってみます。
まずはrecordedCommandに登録する前にテスト実行できるレベルで、CM検出無しのエンコードのみで。
エンコードオプションは、&lt;a href="http://d.hatena.ne.jp/munepi/20091227/1261941397"&gt;ffmpeg で TS をできるだけ高画質な mp4 へ変換してみた&lt;/a&gt;を参考に設定。
&lt;/p&gt;&lt;p&gt;&lt;a href="https://kounoike.github.io/posts/2015-10-04-azkaban-for-chinachu-job/"&gt;続きを読む…&lt;/a&gt; (残りを読むのに必要な時間は1分)&lt;/p&gt;&lt;/div&gt;</description><category>azkaban</category><category>chinachu</category><category>ubuntu</category><guid>https://kounoike.github.io/posts/2015-10-04-azkaban-for-chinachu-job/</guid><pubDate>Sat, 03 Oct 2015 15:36:13 GMT</pubDate></item></channel></rss>